// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package fsm

import (
	"fmt"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
	"io"
)

var _ = xerrors.Errorf

func (t *TaskInfo) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write([]byte{165}); err != nil {
		return err
	}

	// t.ID (fsm.TaskNumber) (uint64)
	if len("ID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"ID\" was too long")
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("ID")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("ID")); err != nil {
		return err
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajUnsignedInt, uint64(t.ID))); err != nil {
		return err
	}

	// t.Wallet (string) (string)
	if len("Wallet") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Wallet\" was too long")
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("Wallet")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("Wallet")); err != nil {
		return err
	}

	if len(t.Wallet) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Wallet was too long")
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len(t.Wallet)))); err != nil {
		return err
	}
	if _, err := w.Write([]byte(t.Wallet)); err != nil {
		return err
	}

	// t.State (fsm.TaskState) (string)
	if len("State") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"State\" was too long")
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("State")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("State")); err != nil {
		return err
	}

	if len(t.State) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.State was too long")
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len(t.State)))); err != nil {
		return err
	}
	if _, err := w.Write([]byte(t.State)); err != nil {
		return err
	}

	// t.IP (string) (string)
	if len("IP") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"IP\" was too long")
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("IP")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("IP")); err != nil {
		return err
	}

	if len(t.IP) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.IP was too long")
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len(t.IP)))); err != nil {
		return err
	}
	if _, err := w.Write([]byte(t.IP)); err != nil {
		return err
	}

	// t.TokenID (string) (string)
	if len("TokenID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"TokenID\" was too long")
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("TokenID")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("TokenID")); err != nil {
		return err
	}

	if len(t.TokenID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.TokenID was too long")
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len(t.TokenID)))); err != nil {
		return err
	}
	if _, err := w.Write([]byte(t.TokenID)); err != nil {
		return err
	}
	return nil
}

func (t *TaskInfo) UnmarshalCBOR(r io.Reader) error {
	br := cbg.GetPeeker(r)

	maj, extra, err := cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("TaskInfo: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(br)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.ID (fsm.TaskNumber) (uint64)
		case "ID":

			maj, extra, err = cbg.CborReadHeader(br)
			if err != nil {
				return err
			}
			if maj != cbg.MajUnsignedInt {
				return fmt.Errorf("wrong type for uint64 field")
			}
			t.ID = TaskNumber(extra)
			// t.Wallet (string) (string)
		case "Wallet":

			{
				sval, err := cbg.ReadString(br)
				if err != nil {
					return err
				}

				t.Wallet = string(sval)
			}
			// t.State (fsm.TaskState) (string)
		case "State":

			{
				sval, err := cbg.ReadString(br)
				if err != nil {
					return err
				}

				t.State = TaskState(sval)
			}
			// t.IP (string) (string)
		case "IP":

			{
				sval, err := cbg.ReadString(br)
				if err != nil {
					return err
				}

				t.IP = string(sval)
			}
			// t.TokenID (string) (string)
		case "TokenID":

			{
				sval, err := cbg.ReadString(br)
				if err != nil {
					return err
				}

				t.TokenID = string(sval)
			}

		default:
			return fmt.Errorf("unknown struct field %d: '%s'", i, name)
		}
	}

	return nil
}
